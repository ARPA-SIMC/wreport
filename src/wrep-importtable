#!/usr/bin/python

import zipfile
import urllib2
import sys
import re
import xml.dom.minidom as xmd
import xml.dom as xdom

DOWNLOAD_URL = "http://www.wmo.int/pages/prog/www/WMOCodes/WMO306_vI2/2010edition/latestTables.zip"
re_fname = re.compile(r"^BUFRCREX_(?P<v>\d+)_(?P<sv>\d+)_(?P<lv>\d+)_xml/BUFRCREX_(?P=v)_(?P=sv)_(?P=lv)_TableB_E.xml$")

BUFR_UNIT_MAP = { "CCITT IA5": "CCITTIA5" }
CREX_UNIT_MAP = {}

class open_zip(dict):
    """
    Open the XML table file from inside a zip file
    """
    def __init__(self, infd):
        self["zf"] = zipfile.ZipFile(infd, "r")
        self["fd_b"] = None
        for i in self["zf"].infolist():
            mo = re_fname.match(i.filename)
            if mo is not None:
                self["fd_b"] = self["zf"].open(i, "r")
                self["v"] = int(mo.group("v"))
                self["sv"] = int(mo.group("sv"))
                self["lv"] = int(mo.group("lv"))

    def close(self):
        for key in ["fd_b"]:
            if self[key] is not None:
                self[key].close()
        self["zf"].close()

def read_mapping(node):
    """
    Convert a DOM node in the form <foo>bar</foo> into a (foo, bar) couple
    """
    key = node.nodeName
    res = []
    for t in node.childNodes:
        if t.nodeType != xdom.Node.TEXT_NODE: continue
        if not t.data: continue
        res.append(t.data)
    return key, "".join(res)

def read_b_table(fd):
    """
    Read an XML B table from the given file descriptor and yield DICTs with all
    the <key>value</key> elements of B table records
    """
    dom = xmd.parse(fd)
    for n in dom.documentElement.childNodes:
        if n.nodeType != xdom.Node.ELEMENT_NODE: continue
        if n.nodeName != "Exp_BUFRCREXTableB_E": continue
        data = dict()
        for x in n.childNodes:
            if x.nodeType != xdom.Node.ELEMENT_NODE: continue
            k, v = read_mapping(x)
            data[k] = v
        yield data

def normalise_bufr_unit(unit):
    """
    Normalise BUFR unit
    """
    unit = unit.upper()
    return BUFR_UNIT_MAP.get(unit, unit)

def normalise_crex_unit(unit):
    """
    Normalise CREX unit
    """
    unit = unit.upper()
    return CREX_UNIT_MAP.get(unit, unit)

def process_xml_b(info, out):
    """
    Open info["fd_b"] as XML and build a BUFR table file with its contents,
    writing it to out
    """
    for data in sorted(read_b_table(info["fd_b"]), key=lambda x:x["FXY"]):
        if "CREX_Unit" not in data or "CREX_Scale" not in data or "CREX_DataWidth_Char" not in data:
            print >>out, " %6.6s %64.64s %24.24s %3d %12d %3d" % (
                data["FXY"],
                data["ElementName_E"],
                normalise_bufr_unit(data["BUFR_Unit"]),
                int(data["BUFR_Scale"]),
                int(data["BUFR_ReferenceValue"]),
                int(data["BUFR_DataWidth_Bits"]))
        else:
            print >>out, " %6.6s %-64.64s %-24.24s %3d %12d %3d %-24.24s %2d %9d" % (
                data["FXY"],
                data["ElementName_E"],
                normalise_bufr_unit(data["BUFR_Unit"]),
                int(data["BUFR_Scale"]),
                int(data["BUFR_ReferenceValue"]),
                int(data["BUFR_DataWidth_Bits"]),
                normalise_crex_unit(data["CREX_Unit"]),
                int(data["CREX_Scale"]),
                int(data["CREX_DataWidth_Char"]))

def process_info(info):
    if info.get("fd_b", None):
        out = open("B0000000000000%03d%03d.txt" % (info["v"], info["sv"]), "w")
        try:
            process_xml_b(info, out)
        finally:
            out.close()


if len(sys.argv) == 1:
    infd = urllib2.urlopen(DOWNLOAD_URL)
    # TODO: download to a temp file: zipfile doesn't document it, but wants seek
    try:
        info = open_zip(infd)
        process_info(info)
    finally:
        infd.close()
elif sys.argv[1].endswith(".zip"):
    infd = open(sys.argv[1])
    try:
        info = open_zip(infd)
        process_info(info)
    finally:
        infd.close()
else:
    pass

